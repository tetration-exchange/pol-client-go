/*
 * Copyright 2017 Cisco Systems, Inc.
 * Cisco Tetration
 *
 * Protobuf declaration of Tetration Network Policy's data structures
 * published to Kafka.
 */

syntax = "proto3";

package TetrationNetworkPolicyProto;

// package name where the java class should reside
option java_package = "com.tetration.tetration_network_policy.proto";
option java_outer_classname = "TetrationNetworkPolicyProto";

enum IPAddressFamily {
  INVALID = 0;
  IPv4 = 1;
  IPv6 = 2;
};

// IP address with prefix.
message AddressWithPrefix {
  // IP Address in Network Byte Order.
  bytes ip_addr = 1;

  uint32 prefix_length = 2;

  // Address family
  IPAddressFamily addr_family = 3;
}

// Message to represent a contiguous range of IP Addresses.
message AddressWithRange {
  // Start IP Address in Network Byte Order.
  bytes start_ip_addr = 1;

  // End IP Address in Network Byte Order. End IP Address must be greater than
  // start IP Address.
  bytes end_ip_addr = 2;

  // Address family
  IPAddressFamily addr_family = 3;
}

// When we enforce on Load Balancer devices we will expose VIPs, URLs and
// service names as members of InventoryGroup. Note that an InventoryGroup
// with members of LBService can be used only as provider_filter_id in
// FlowFilter.
message LBService {
  oneof ServiceName {
    // Virtual IP used by clients to reach the service behind load balancers.
    AddressWithPrefix vip = 1;

    // URL used by clients to reach service behind load balancers.
    string url = 2;

    // Service name if a non-standard mechanism is used for service discovery.
    string name = 3;
  }
}

message KeyValue {
  string key = 1;

  string value = 2;
}

// An inventory item specifies cluster entities such as servers, appliances.
// It can be either a singular IP address, a subnet or an address range.
message InventoryItem {
  oneof address {
    AddressWithPrefix ip_address = 1;

    AddressWithRange address_range = 2;

    LBService lb_service = 4;
  }
}

// Tetration debug information related to InventoryGroups.
message InventoryGroupMetaData {
  // ID of the scope where corresponding inventory group is defined.
  string scope_id = 1;
}

// Inventory group represents a grouping of inventory items. They will be
// referenced by Flow Filters.
message InventoryGroup {
  // Unique identifier assigned to inventory group. Flow filters will refer
  // to these values. If a given update has multiple InventoryGroup messages
  // with the same id then the clients will merge inventory_items to construct
  // the complete inventory group.
  string id = 1;

  repeated InventoryItem inventory_items = 2;

  // Query filter json representation. It enables us to identify the common
  // attributes of inventory_items that group them together.
  string query = 3;

  // Human readable name assigned to this inventory group.
  string name = 4;

  // Any tags defined in Tetration for a specific inventory group will be
  // provided here.
  // Note these tags are opaque for Tetration. Clients can add these Tags
  // through rest interface. Tetration passes them as-is on Kafka.
  repeated KeyValue tags = 5;

  // Debug information.
  InventoryGroupMetaData meta_data = 6;
}

enum IPProtocol {
  IP = 0;
  ICMP = 1;
  IGMP = 2;
  GGP = 3;
  IPIP = 4;
  ST = 5;
  TCP = 6;
  CBT = 7;
  EGP = 8;
  IGP = 9;
  BBNRCC = 10;
  NVP = 11;
  PUP = 12;
  ARGUS = 13;
  EMCON = 14;
  XNET = 15;
  CHAOS = 16;
  UDP = 17;
  MUX = 18;
  DCNMEAS = 19;
  HMP = 20;
  PRM = 21;
  IDP = 22;
  TRUNK1 = 23;
  TRUNK2 = 24;
  LEAF1 = 25;
  LEAF2 = 26;
  RDP = 27;
  IRTP = 28;
  TP = 29;
  NETBLT = 30;
  MFPNSP = 31;
  MERITINP = 32;
  SEP = 33;
  _3PC = 34;
  IDPR = 35;
  XTP = 36;
  DDP = 37;
  CMTP = 38;
  TPPP = 39;
  IL = 40;
  IP6 = 41;
  SDRP = 42;
  ROUTING = 43;
  FRAGMENT = 44;
  RSVP = 46;
  GRE = 47;
  MHRP = 48;
  ENA = 49;
  ESP = 50;
  AH = 51;
  INLSP = 52;
  SWIPE = 53;
  NARP = 54;
  MOBILE = 55;
  TLSP = 56;
  SKIP = 57;
  ICMP6 = 58;
  NONE = 59;
  DSTOPTS = 60;
  ANYHOST = 61;
  CFTP = 62;
  ANYNET = 63;
  EXPAK = 64;
  KRYPTOLAN = 65;
  RVD = 66;
  IPPC = 67;
  DISTFS = 68;
  SATMON = 69;
  VISA = 70;
  IPCV = 71;
  CPNX = 72;
  CPHB = 73;
  WSN = 74;
  PVP = 75;
  BRSATMON = 76;
  SUNND = 77;
  WBMON = 78;
  WBEXPAK = 79;
  EON = 80;
  VMTP = 81;
  SVMTP = 82;
  VINES = 83;
  TTP = 84;
  NSFIGP = 85;
  DGP = 86;
  TCF = 87;
  EIGRP = 88;
  OSPF = 89;
  SPRITERPC = 90;
  LARP = 91;
  MTP = 92;
  AX25 = 93;
  IPIPENCAP = 94;
  MICP = 95;
  SCCSP = 96;
  ETHERIP = 97;
  ENCAP = 98;
  ANYENC = 99;
  GMTP = 100;
  IFMP = 101;
  PNNI = 102;
  PIM = 103;
  ARIS = 104;
  SCPS = 105;
  QNX = 106;
  AN = 107;
  IPCOMP = 108;
  SNP = 109;
  COMPAQPEER = 110;
  IPXIP = 111;
  VRRP = 112;
  PGM = 113;
  ANY0HOP = 114;
  L2TP = 115;
  DDX = 116;
  IATP = 117;
  STP = 118;
  SRP = 119;
  UTI = 120;
  SMP = 121;
  SM = 122;
  PTP = 123;
  ISIS = 124;
  FIRE = 125;
  CRTP = 126;
  CRUDP = 127;
  SSCOPMCE = 128;
  IPLT = 129;
  SPS = 130;
  PIPE = 131;
  SCTP = 132;
  FC = 133;
  RSVPIGN = 134;
  MOBILITYHEADER = 135;
  UDPLITE = 136;
  MPLSINIP = 137;
  MANET = 138;
  HIP = 139;
  SHIM6 = 140;
  WESP = 141;
  ROHC = 142;
  PROTO_143 = 143;
  PROTO_144 = 144;
  PROTO_145 = 145;
  PROTO_146 = 146;
  PROTO_147 = 147;
  PROTO_148 = 148;
  PROTO_149 = 149;
  PROTO_150 = 150;
  PROTO_151 = 151;
  PROTO_152 = 152;
  PROTO_153 = 153;
  PROTO_154 = 154;
  PROTO_155 = 155;
  PROTO_156 = 156;
  PROTO_157 = 157;
  PROTO_158 = 158;
  PROTO_159 = 159;
  PROTO_160 = 160;
  PROTO_161 = 161;
  PROTO_162 = 162;
  PROTO_163 = 163;
  PROTO_164 = 164;
  PROTO_165 = 165;
  PROTO_166 = 166;
  PROTO_167 = 167;
  PROTO_168 = 168;
  PROTO_169 = 169;
  PROTO_170 = 170;
  PROTO_171 = 171;
  PROTO_172 = 172;
  PROTO_173 = 173;
  PROTO_174 = 174;
  PROTO_175 = 175;
  PROTO_176 = 176;
  PROTO_177 = 177;
  PROTO_178 = 178;
  PROTO_179 = 179;
  PROTO_180 = 180;
  PROTO_181 = 181;
  PROTO_182 = 182;
  PROTO_183 = 183;
  PROTO_184 = 184;
  PROTO_185 = 185;
  PROTO_186 = 186;
  PROTO_187 = 187;
  PROTO_188 = 188;
  PROTO_189 = 189;
  PROTO_190 = 190;
  PROTO_191 = 191;
  PROTO_192 = 192;
  PROTO_193 = 193;
  PROTO_194 = 194;
  PROTO_195 = 195;
  PROTO_196 = 196;
  PROTO_197 = 197;
  PROTO_198 = 198;
  PROTO_199 = 199;
  PROTO_200 = 200;
  PROTO_201 = 201;
  PROTO_202 = 202;
  PROTO_203 = 203;
  PROTO_204 = 204;
  PROTO_205 = 205;
  PROTO_206 = 206;
  PROTO_207 = 207;
  PROTO_208 = 208;
  PROTO_209 = 209;
  PROTO_210 = 210;
  PROTO_211 = 211;
  PROTO_212 = 212;
  PROTO_213 = 213;
  PROTO_214 = 214;
  PROTO_215 = 215;
  PROTO_216 = 216;
  PROTO_217 = 217;
  PROTO_218 = 218;
  PROTO_219 = 219;
  PROTO_220 = 220;
  PROTO_221 = 221;
  PROTO_222 = 222;
  PROTO_223 = 223;
  PROTO_224 = 224;
  PROTO_225 = 225;
  PROTO_226 = 226;
  PROTO_227 = 227;
  PROTO_228 = 228;
  PROTO_229 = 229;
  PROTO_230 = 230;
  PROTO_231 = 231;
  PROTO_232 = 232;
  PROTO_233 = 233;
  PROTO_234 = 234;
  PROTO_235 = 235;
  PROTO_236 = 236;
  PROTO_237 = 237;
  PROTO_238 = 238;
  PROTO_239 = 239;
  PROTO_240 = 240;
  PROTO_241 = 241;
  PROTO_242 = 242;
  PROTO_243 = 243;
  PROTO_244 = 244;
  PROTO_245 = 245;
  PROTO_246 = 246;
  ARP_REVREQUEST = 247;
  ARP_REVREPLY = 248;
  ARP_REQUEST = 249;
  ARP_REPLY = 250;
  PROTO_251 = 251;
  PROTO_252 = 252;
  EXPERIMENT1 = 253;
  EXPERIMENT2 = 254;
  RESERVED = 255;
}

// Used to represent contiguous port numbers.
message PortRange {
  uint32 start_port = 1;

  uint32 end_port = 2;
}

message ProtocolAndPorts {
  IPProtocol protocol = 1;

  repeated PortRange port_ranges = 2;

  repeated uint32 ports = 3;
}

// Defines the match criteria for Intents.
message FlowFilter {
  // Unique id assigned to this FlowFilter.
  string id = 1 [deprecated=true];

  // Id of inventory filter corresponding to consumers of a service.
  string consumer_filter_id = 2;

  // Id of inventory filter corresponding to providers of a service.
  string provider_filter_id = 3;

  // List of ports and protocols where the service is accessible.
  repeated ProtocolAndPorts protocol_and_ports = 4;
}

// Contains debug information from Tetration.
message IntentMetaData {
  // The intent due to which this policy exists.
  string intent_id = 1;

  string hash_id = 2;

  // The workspace due to which this policy exists.
  string workspace_id = 3;

  // Fields to help trace the ADM related constructs that is responsible for
  // creating this intent.
  string adm_data_set_id = 4;
  string adm_data_set_version = 5;
  string policy_intent_group_id = 6;
  string cluster_edge_id = 7;

  // Unique identifier of the scope corresponding to workspace_id.
  string scope_id = 8;

  // Human readable scope name.
  string scope_name = 9 [deprecated=true];
}

message Intent {
  // Unique id assigned to this Intent.
  string id = 1;

  FlowFilter flow_filter = 2;

  enum Action {
    INVALID = 0;
    // Allow the corresponding flows.
    ALLOW = 1;
    // DROP the corresponding flows.
    DROP = 2;
  };

  // Action to be taken for corresponding flows.
  Action action = 3;

  // Identifies the enforcement point of the intent.
  enum TargetDevice {
    // Inside VM, Bare-metal or containers.
    WORKLOAD = 0;
    // In network using SDN tools like ACI.
    NETWORK_FABRIC = 1;
    // Load balancers and NAT devices that support enforcement.
    MIDDLE_BOXES = 2;
    // Firewalls
    FIREWALLS = 3;
  };

  // List of target devices where user wants the intent to be enforced. If
  // no target devices are specified then clients should enforce if they
  // can.
  repeated TargetDevice target_devices = 4;

  // Any tags defined in Tetration for a specific intent will be provided here.
  // Note these tags are opaque for Tetration. Clients can add these Tags
  // through rest interface. Tetration passes them as-is on Kafka.
  repeated KeyValue tags = 5;

  // Tetration debug information. Can be used to link back to Applications and
  // workspaces using either UI or OPenAPI
  IntentMetaData meta_data = 6;

  // Human readable Intent name.
  string intent_name = 7;
}

// CatchAll policy action.
message CatchAllPolicy {
  enum Action {
    INVALID = 0;
    // Allow the corresponding flows.
    ALLOW = 1;
    // DROP the corresponding flows.
    DROP = 2;
  };
  Action action = 1;
}

message NetworkPolicy {
  // Fully expanded inventory groups.
  repeated InventoryGroup inventory_filters = 1;

  // Order of intents in decreasing order of priority.
  repeated Intent intents = 2;

  // Catch All policy.
  CatchAllPolicy catch_all = 3 [deprecated=true];
}

message ScopeInfo {
  // Unique id of the scope.
  string id = 1;

  // Human readable name assigned to the scope.
  string name = 2;

  // Unique id of the parent scope.
  string parent_id = 3;

  // Tags are provided by the clients to be assigned to the scopes.  The
  // client will interpret the tag according to its value.  Tags applied
  // to scopes may be applied to items defined within the scope such as
  // InventoryGroups or Intents or they may follow other, client specific,
  // interpretation and application.  Inheritance of tags from parent scopes
  // is generally implied.
  repeated KeyValue tags = 4;

  // Below is catch all action defined for this scope's primary workspace
  // with enforcement enabled. If there is no primary workspace created for
  // this scope, this catch all action is set to INVALID.
  enum Action {
    INVALID = 0;
    // Allow the corresponding flows.
    ALLOW = 1;
    // DROP the corresponding flows.
    DROP = 2;
  };
  Action catch_all_action = 5;

  // Priority of primary workspace associated with this scope.
  // Usually primary workspace in sub-scope has lesser priority than
  // the one in parent-scope. However, this workspace order (priorities)
  // can be modified by user as needed.
  // Note the greater value means lesser priority, and the primary workspace
  // in root scope has highest priority.
  uint64 primary_ws_priority = 6;
}

message TenantNetworkPolicy {
  // Unique name assigned to tenant. It's the same as the root-scope name.
  string tenant_name = 1;

  // Network policy corresponding to tenant_name. Note that policy for one
  // tenant might be split across several TenantNetworkPolicy messages. To
  // reconstruct the policy state we need to append NetworkPolicy from multiple
  // messages in the same order of TenantNetworkPolicy.
  repeated NetworkPolicy network_policy = 2;

  // Repeated list of network VRFs that are part of the Tenant. Please note
  // that multiple  network_vrfs are part of single Tetration VRF.
  repeated string network_vrfs = 3;

  // Each Tenant in Tetration is represented by root scope. Note that
  // root-scope does not have a parent_id.
  string root_scope_id = 4;

  // Map of all the sub-scopes in root-scopes. The key of this map is the
  // scope id.
  map<string, ScopeInfo> scopes = 5;
}

message IntentStatus {
  // unique id assigned to the intent in NetworkPolicy.
  string intent_id = 1;

  // Status of enforcement reported by the client.
  enum Status {
    UNKNOWN = 0;
    // Client cannot enforce this policy.
    IGNORED = 1;
    // Client can enforce this policy. However, encountered an error while
    // trying to enforce the policy.
    FAILED = 2;
    // Successfully enforced.
    ENFORCED = 3;
    // Client enforced a relaxed policy. Indicates that more flows will be
    // allowed than what the intent prescribed. Clients cannot modify the
    // policy to drop flows that intent says allow.
    MODIFIED_AND_ENFORCED = 4;
  }

  Status status = 2;

  // Time when the status of the intent has changed. Time is measured as number
  // of microseconds that have elapsed since unix epoch started.
  uint64 timestamp_usec = 3;

  // This message is set only when the status is MODIFIED_AND_ENFORCED. This
  // will let the clients inform Tetration on how the intent was modified.
  FlowFilter modified_flow_filter = 4;

  // If status is set to IGNORED or FAILED then client will include any debug
  // info in status_reason.
  string status_reason = 5;

  // Tetration debug information per intent, see also message type Intent.
  // Clients shall return this field as received from Tetration.
  IntentMetaData meta_data = 6;

  // List of Inventory items used by this intent.
  // This information is used for licensing and is filled by LB agents.
  repeated InventoryItem inventory_items = 7;
}

message NetworkPolicyStatus {
  repeated IntentStatus intent_status = 1;
}

// This message contains health status of agent (application) enforcing policies.
// Keep in mind this is not the health status of load balancers, which
// the policies are deployed to.
message AgentHealth {
  uint64 uptime_usec = 1;
  // optional key value pairs of sysinfo-like metrics
  map<string, string> sysinfo = 2;
}

// Status of policy enforcement as reported by one of the clients consuming
// TenantNetworkPolicy. Note that multiple clients can be consuming the same
// policy and enforcing at different point on the network. For example, a
// client for middle-boxes like load balancers might be enforcing a subset
// of the policies. These clients will report the status of what they are
// enforcing. Similarly a client for network orchestrator like ACI might
// enforce all the policies and report its enforcement status.
message TenantNetworkPolicyStatus {
   // Unique name assigned to tenant. It's the same as the root-scope name.
  string tenant_name = 1;

  // Just like TenantNetworkPolicy we can have TenantNetworkPolicyStatus for
  // one tenant split across several TenantNetworkPolicyStatus messages. To
  // reconstruct the policy status we need to append NetworkPolicyStatus
  // from multiple messages.
  repeated NetworkPolicyStatus network_policy_status = 2;

  string root_scope_id = 3;

  // Unique id assigned to the client that is reporting enforcement status.
  // For POLICY_STATUS type this should be the load balancer's id.
  string client_id = 4;

  // Client release version.
  string client_version = 5;

  // enum to indicate type of this status message
  enum StatusType {
    UNKNOWN_STATUS = 0;
    POLICY_STATUS  = 1; // network_policy_status
    LOG_STATUS     = 2; // logs produced by agent app enforcing policies
    HEALTH_STATUS  = 3; // health status of agent app enforcing policies
  }
  StatusType type = 6;

  // For LOG_STATUS and HEALTH_STATUS type this must be set to identify the agent,
  // which deploys the received policies to the managed load balancers.
  string agent_id = 7;

  bytes agent_logs = 8;

  AgentHealth agent_health = 9;
}

// The network policy updates we send over Kafka can be large; over a couple of
// GB each. Given that it is recommended to keep individual Kafka messages under
// 10MB we split each policy update into several smaller Kafka messages. To
// enable clients to correctly reconstruct the state and handle error scenarios
// we wrap each Kafka message under KafkaUpdate proto. Every policy update will
// have a begin marker UPDATE_START and end marker UPDATE_END.
// To reiterate every Policy update will have following set of messages:
//           - UPDATE_START indicates a new policy update begins.
//           - Several UPDATE messages with increasing sequence numbers.
//           - UPDATE_END indicates the new policy update is complete.
// Note that the first message (UPDATE_START) sequence number is zero and
// subsequent message's sequence numbers are strictly incremented by one.
// A client reading these updates should read all the messages from UPDATE_START
// to UPDATE_END. If any message is missing then client should skip all the
// messages until the next UPDATE_START message.
message KafkaUpdate {
  enum UpdateType {
    // Start marker for a new policy update.
    UPDATE_START = 0;
    // Message part of the policy update.
    UPDATE = 1;
    // End marker for the current policy update.
    UPDATE_END = 2;
  };

  // Type of update message.
  UpdateType type = 1;

  // Sequence number, starting with zero, is incremented by 1 for each
  // message that is part of a policy update.
  uint32 sequence_num = 2;

  // Partial details of the network policy. For Intents that are part of
  // different KafkaUpdate messages: the Intents in earlier message have higher
  // priority than intents in later messages. This message is populated on
  // Kafka where policy updates are pushed by Tetration.
  TenantNetworkPolicy tenant_network_policy = 3;

  // Monotonically increasing version number of policy state.
  uint64 version = 4;

  // This message is populated in Kafka topics that Tenants publish the
  // status of enforcement.
  TenantNetworkPolicyStatus network_policy_status = 5;

  // Creation timestamp of this message.
  uint64 create_timestamp = 6;
}
